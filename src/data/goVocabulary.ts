import { VocabularyWord } from '../types/vocabulary';

export const goVocabulary: VocabularyWord[] = [
  {id: 1, word: "package", meaning: "Groups related code together", example: "package main", dateAdded: new Date().toLocaleDateString()},
  {id: 2, word: "import", meaning: "Brings in code from other packages", example: "import \"fmt\"", dateAdded: new Date().toLocaleDateString()},
  {id: 3, word: "func", meaning: "Creates a function", example: "func main() {}", dateAdded: new Date().toLocaleDateString()},
  {id: 4, word: "var", meaning: "Declares a variable", example: "var x int", dateAdded: new Date().toLocaleDateString()},
  {id: 5, word: "const", meaning: "Declares a constant (unchangeable value)", example: "const pi = 3.14", dateAdded: new Date().toLocaleDateString()},
  {id: 6, word: "type", meaning: "Creates a new type", example: "type Person struct {}", dateAdded: new Date().toLocaleDateString()},
  {id: 7, word: "struct", meaning: "Groups variables together", example: "type User struct { name string }", dateAdded: new Date().toLocaleDateString()},
  {id: 8, word: "interface", meaning: "Defines what methods a type should have", example: "type Writer interface { Write() }", dateAdded: new Date().toLocaleDateString()},
  {id: 9, word: "if", meaning: "Runs code only if condition is true", example: "if x > 0 { }", dateAdded: new Date().toLocaleDateString()},
  {id: 10, word: "else", meaning: "Runs code if condition is false", example: "if x > 0 { } else { }", dateAdded: new Date().toLocaleDateString()},
  {id: 11, word: "for", meaning: "Repeats code multiple times", example: "for i := 0; i < 10; i++ { }", dateAdded: new Date().toLocaleDateString()},
  {id: 12, word: "range", meaning: "Loops through arrays, slices, maps", example: "for i, v := range slice { }", dateAdded: new Date().toLocaleDateString()},
  {id: 13, word: "switch", meaning: "Chooses between multiple options", example: "switch x { case 1: }", dateAdded: new Date().toLocaleDateString()},
  {id: 14, word: "case", meaning: "One option in a switch", example: "case 1: fmt.Println(\"one\")", dateAdded: new Date().toLocaleDateString()},
  {id: 15, word: "default", meaning: "Runs if no case matches", example: "default: fmt.Println(\"other\")", dateAdded: new Date().toLocaleDateString()},
  {id: 16, word: "return", meaning: "Exits function and gives back value", example: "return 42", dateAdded: new Date().toLocaleDateString()},
  {id: 17, word: "break", meaning: "Exits loop early", example: "for { break }", dateAdded: new Date().toLocaleDateString()},
  {id: 18, word: "continue", meaning: "Skips to next loop iteration", example: "for { continue }", dateAdded: new Date().toLocaleDateString()},
  {id: 19, word: "go", meaning: "Runs function in parallel", example: "go myFunction()", dateAdded: new Date().toLocaleDateString()},
  {id: 20, word: "defer", meaning: "Runs code when function ends", example: "defer file.Close()", dateAdded: new Date().toLocaleDateString()},
  {id: 21, word: "chan", meaning: "Creates a channel for communication", example: "ch := make(chan int)", dateAdded: new Date().toLocaleDateString()},
  {id: 22, word: "select", meaning: "Waits for channel operations", example: "select { case <-ch: }", dateAdded: new Date().toLocaleDateString()},
  {id: 23, word: "make", meaning: "Creates slices, maps, channels", example: "make([]int, 5)", dateAdded: new Date().toLocaleDateString()},
  {id: 24, word: "new", meaning: "Creates pointer to new zero value", example: "new(int)", dateAdded: new Date().toLocaleDateString()},
  {id: 25, word: "nil", meaning: "Empty/null value", example: "var ptr *int = nil", dateAdded: new Date().toLocaleDateString()},
  {id: 26, word: "true", meaning: "Boolean value for yes/correct", example: "var isReady bool = true", dateAdded: new Date().toLocaleDateString()},
  {id: 27, word: "false", meaning: "Boolean value for no/incorrect", example: "var isReady bool = false", dateAdded: new Date().toLocaleDateString()},
  {id: 28, word: "int", meaning: "Whole number type", example: "var age int = 25", dateAdded: new Date().toLocaleDateString()},
  {id: 29, word: "string", meaning: "Text type", example: "var name string = \"John\"", dateAdded: new Date().toLocaleDateString()},
  {id: 30, word: "bool", meaning: "True/false type", example: "var isActive bool = true", dateAdded: new Date().toLocaleDateString()},
  {id: 31, word: "float64", meaning: "Decimal number type", example: "var price float64 = 19.99", dateAdded: new Date().toLocaleDateString()},
  {id: 32, word: "byte", meaning: "Single character or small number", example: "var b byte = 'A'", dateAdded: new Date().toLocaleDateString()},
  {id: 33, word: "rune", meaning: "Unicode character", example: "var r rune = 'ðŸ™‚'", dateAdded: new Date().toLocaleDateString()},
  {id: 34, word: "array", meaning: "Fixed-size list of items", example: "var arr [5]int", dateAdded: new Date().toLocaleDateString()},
  {id: 35, word: "slice", meaning: "Flexible list of items", example: "var slice []int", dateAdded: new Date().toLocaleDateString()},
  {id: 36, word: "map", meaning: "Key-value pairs", example: "var m map[string]int", dateAdded: new Date().toLocaleDateString()},
  {id: 37, word: "pointer", meaning: "Memory address of a variable", example: "var ptr *int", dateAdded: new Date().toLocaleDateString()},
  {id: 38, word: "method", meaning: "Function that belongs to a type", example: "func (p Person) getName() string", dateAdded: new Date().toLocaleDateString()},
  {id: 39, word: "receiver", meaning: "Type that owns a method", example: "(p Person) in method", dateAdded: new Date().toLocaleDateString()},
  {id: 40, word: "goroutine", meaning: "Lightweight thread", example: "go func() { }()", dateAdded: new Date().toLocaleDateString()},
  {id: 41, word: "channel", meaning: "Pipe for sending data between goroutines", example: "ch := make(chan int)", dateAdded: new Date().toLocaleDateString()},
  {id: 42, word: "buffer", meaning: "Temporary storage for data", example: "Buffered channel", dateAdded: new Date().toLocaleDateString()},
  {id: 43, word: "mutex", meaning: "Lock to prevent data races", example: "var mu sync.Mutex", dateAdded: new Date().toLocaleDateString()},
  {id: 44, word: "panic", meaning: "Crashes program with error", example: "panic(\"something went wrong\")", dateAdded: new Date().toLocaleDateString()},
  {id: 45, word: "recover", meaning: "Catches panic and prevents crash", example: "defer func() { recover() }()", dateAdded: new Date().toLocaleDateString()},
  {id: 46, word: "append", meaning: "Adds items to slice", example: "slice = append(slice, 1, 2, 3)", dateAdded: new Date().toLocaleDateString()},
  {id: 47, word: "len", meaning: "Gets length of slice/array/string", example: "len(\"hello\") // returns 5", dateAdded: new Date().toLocaleDateString()},
  {id: 48, word: "cap", meaning: "Gets capacity of slice", example: "cap(slice)", dateAdded: new Date().toLocaleDateString()},
  {id: 49, word: "copy", meaning: "Copies data from one slice to another", example: "copy(dst, src)", dateAdded: new Date().toLocaleDateString()},
  {id: 50, word: "delete", meaning: "Removes key from map", example: "delete(myMap, \"key\")", dateAdded: new Date().toLocaleDateString()},
  {id: 51, word: "close", meaning: "Closes a channel", example: "close(ch)", dateAdded: new Date().toLocaleDateString()},
  {id: 52, word: "fallthrough", meaning: "Continues to next case in switch", example: "case 1: fallthrough", dateAdded: new Date().toLocaleDateString()},
  {id: 53, word: "goto", meaning: "Jumps to labeled line", example: "goto label", dateAdded: new Date().toLocaleDateString()},
  {id: 54, word: "iota", meaning: "Auto-incrementing constant", example: "const ( A = iota; B; C )", dateAdded: new Date().toLocaleDateString()},
  {id: 55, word: "blank identifier", meaning: "Underscore _ to ignore values", example: "_, err := someFunc()", dateAdded: new Date().toLocaleDateString()},
  {id: 56, word: "embedding", meaning: "Putting one struct inside another", example: "type User struct { Person }", dateAdded: new Date().toLocaleDateString()},
  {id: 57, word: "composition", meaning: "Building complex types from simple ones", example: "Struct with multiple fields", dateAdded: new Date().toLocaleDateString()},
  {id: 58, word: "zero value", meaning: "Default value when variable is created", example: "0 for int, \"\" for string", dateAdded: new Date().toLocaleDateString()},
  {id: 59, word: "garbage collector", meaning: "Automatically frees unused memory", example: "Go handles memory cleanup", dateAdded: new Date().toLocaleDateString()},
  {id: 60, word: "stack", meaning: "Fast memory for function calls", example: "Local variables stored here", dateAdded: new Date().toLocaleDateString()},
  {id: 61, word: "heap", meaning: "Slower memory for dynamic allocation", example: "Objects created with new/make", dateAdded: new Date().toLocaleDateString()},
  {id: 62, word: "concurrency", meaning: "Multiple things happening at once", example: "Using goroutines", dateAdded: new Date().toLocaleDateString()},
  {id: 63, word: "parallelism", meaning: "Actually running multiple things simultaneously", example: "Multi-core processing", dateAdded: new Date().toLocaleDateString()},
  {id: 64, word: "race condition", meaning: "Bug when multiple goroutines access same data", example: "Use mutex to prevent", dateAdded: new Date().toLocaleDateString()},
  {id: 65, word: "deadlock", meaning: "Program stuck waiting forever", example: "Goroutines waiting for each other", dateAdded: new Date().toLocaleDateString()},
  {id: 66, word: "compile", meaning: "Convert code to executable program", example: "go build main.go", dateAdded: new Date().toLocaleDateString()},
  {id: 67, word: "runtime", meaning: "Code that runs while program executes", example: "Garbage collector is runtime", dateAdded: new Date().toLocaleDateString()},
  {id: 68, word: "main", meaning: "Entry point of program", example: "func main() { }", dateAdded: new Date().toLocaleDateString()},
  {id: 69, word: "init", meaning: "Runs before main function", example: "func init() { }", dateAdded: new Date().toLocaleDateString()},
  {id: 70, word: "error", meaning: "Built-in type for handling problems", example: "if err != nil { }", dateAdded: new Date().toLocaleDateString()}
];