import { VocabularyWord } from '../types/vocabulary';

export const symbolsVocabulary: VocabularyWord[] = [
  { id: 201, word: "+", meaning: "Addition operator", example: "a + b", dateAdded: new Date().toLocaleDateString() },
  { id: 202, word: "-", meaning: "Subtraction operator", example: "a - b", dateAdded: new Date().toLocaleDateString() },
  { id: 203, word: "*", meaning: "Multiplication operator", example: "a * b", dateAdded: new Date().toLocaleDateString() },
  { id: 204, word: "/", meaning: "Division operator", example: "a / b", dateAdded: new Date().toLocaleDateString() },
  { id: 205, word: "%", meaning: "Modulus operator (remainder)", example: "a % b", dateAdded: new Date().toLocaleDateString() },
  { id: 206, word: "=", meaning: "Assignment operator", example: "x = 5", dateAdded: new Date().toLocaleDateString() },
  { id: 207, word: "==", meaning: "Equality comparison", example: "a == b", dateAdded: new Date().toLocaleDateString() },
  { id: 208, word: "!=", meaning: "Not equal comparison", example: "a != b", dateAdded: new Date().toLocaleDateString() },
  { id: 209, word: ">", meaning: "Greater than comparison", example: "a > b", dateAdded: new Date().toLocaleDateString() },
  { id: 210, word: "<", meaning: "Less than comparison", example: "a < b", dateAdded: new Date().toLocaleDateString() },
  { id: 211, word: ">=", meaning: "Greater than or equal to", example: "a >= b", dateAdded: new Date().toLocaleDateString() },
  { id: 212, word: "<=", meaning: "Less than or equal to", example: "a <= b", dateAdded: new Date().toLocaleDateString() },
  { id: 213, word: "' ' (single quotes)", meaning: "Character literal or rune", example: "'a'", dateAdded: new Date().toLocaleDateString() },
  { id: 214, word: '" " (double quotes)', meaning: "String literal", example: '"hello"', dateAdded: new Date().toLocaleDateString() },
  { id: 215, word: "` ` (backticks)", meaning: "Raw string literal (no escaping)", example: "`raw string`", dateAdded: new Date().toLocaleDateString() },
  { id: 216, word: "&&", meaning: "Logical AND", example: "a && b", dateAdded: new Date().toLocaleDateString() },
  { id: 217, word: "||", meaning: "Logical OR", example: "a || b", dateAdded: new Date().toLocaleDateString() },
  { id: 218, word: "!", meaning: "Logical NOT", example: "!a", dateAdded: new Date().toLocaleDateString() },
  { id: 219, word: ",", meaning: "Comma (separator)", example: "a, b", dateAdded: new Date().toLocaleDateString() },
  { id: 220, word: ".", meaning: "Dot (access field or method)", example: "object.field", dateAdded: new Date().toLocaleDateString() },
  { id: 221, word: ":", meaning: "Colon (label, slice, map)", example: "case 1:", dateAdded: new Date().toLocaleDateString() },
  { id: 222, word: ";", meaning: "Semicolon (statement separator)", example: "a := 1; b := 2", dateAdded: new Date().toLocaleDateString() },
  { id: 223, word: "()", meaning: "Parentheses (grouping, function call)", example: "(a + b)", dateAdded: new Date().toLocaleDateString() },
  { id: 224, word: "[]", meaning: "Square brackets (arrays, slices)", example: "arr[0]", dateAdded: new Date().toLocaleDateString() },
  { id: 225, word: "{}", meaning: "Curly braces (blocks, structs, maps)", example: "func() { }", dateAdded: new Date().toLocaleDateString() },
];
