import { VocabularyWord } from '../types/vocabulary';

export const functionVocabulary: VocabularyWord[] = [
  {id: 101, word: "Capitalize", meaning: "Capitalizes the first letter of each word in a string.", example: "Capitalize(\"hello world\") // \"Hello World\"", dateAdded: new Date().toLocaleDateString()},
  {id: 102, word: "Compare", meaning: "Compares two strings lexicographically. Returns 0 if equal, -1 if a < b, 1 if a > b.", example: "Compare(\"a\",\"b\") // -1", dateAdded: new Date().toLocaleDateString()},
  {id: 103, word: "Concat", meaning: "Concatenates two strings.", example: "Concat(\"a\",\"b\") // \"ab\"", dateAdded: new Date().toLocaleDateString()},
  {id: 104, word: "ConcatParams", meaning: "Concatenates command-line arguments into a single string separated by newlines.", example: "ConcatParams([\"a\",\"b\"]) // \"a\\nb\"", dateAdded: new Date().toLocaleDateString()},
  {id: 105, word: "DivMod", meaning: "Divides a by b, stores quotient in div and remainder in mod (pointers).", example: "DivMod(10,3,&div,&mod)", dateAdded: new Date().toLocaleDateString()},
  {id: 106, word: "EightQueens", meaning: "Solves and prints all solutions to the Eight Queens puzzle.", example: "EightQueens()", dateAdded: new Date().toLocaleDateString()},
  {id: 107, word: "FindNextPrime", meaning: "Returns the next prime number greater than or equal to n.", example: "FindNextPrime(8) // 11", dateAdded: new Date().toLocaleDateString()},
  {id: 108, word: "FirstRune", meaning: "Returns the first rune of a string.", example: "FirstRune(\"abc\") // 'a'", dateAdded: new Date().toLocaleDateString()},
  {id: 109, word: "Index", meaning: "Returns the index of the first occurrence of a substring.", example: "Index(\"abc\",\"b\") // 1", dateAdded: new Date().toLocaleDateString()},
  {id: 110, word: "IsAlpha", meaning: "Checks if a string contains only letters and digits.", example: "IsAlpha(\"abc123\") // true", dateAdded: new Date().toLocaleDateString()},
  {id: 111, word: "IsNegative", meaning: "Prints 'T' if the number is negative, 'F' otherwise.", example: "IsNegative(-1)", dateAdded: new Date().toLocaleDateString()},
  {id: 112, word: "IsNumeric", meaning: "Checks if a string contains only digits.", example: "IsNumeric(\"123\") // true", dateAdded: new Date().toLocaleDateString()},
  {id: 113, word: "IsPrime", meaning: "Checks if a number is prime.", example: "IsPrime(7) // true", dateAdded: new Date().toLocaleDateString()},
  {id: 114, word: "IsPrintable", meaning: "Checks if all characters in a string are printable ASCII.", example: "IsPrintable(\"abc\") // true", dateAdded: new Date().toLocaleDateString()},
  {id: 115, word: "IsUpper", meaning: "Checks if all letters in a string are uppercase.", example: "IsUpper(\"ABC\") // true", dateAdded: new Date().toLocaleDateString()},
  {id: 116, word: "IsLower", meaning: "Checks if all letters in a string are lowercase.", example: "IsLower(\"abc\") // true", dateAdded: new Date().toLocaleDateString()},
  {id: 117, word: "StrRev", meaning: "Reverses a string.", example: "StrRev(\"hello\") // \"olleh\"", dateAdded: new Date().toLocaleDateString()},
  {id: 118, word: "StrLen", meaning: "Returns the number of runes in a string.", example: "StrLen(\"abc\") // 3", dateAdded: new Date().toLocaleDateString()},
  {id: 119, word: "Swap", meaning: "Swaps the values of two integers via pointers.", example: "Swap(&a, &b)", dateAdded: new Date().toLocaleDateString()},
  {id: 120, word: "ToLower", meaning: "Converts all uppercase letters in a string to lowercase.", example: "ToLower(\"ABC\") // \"abc\"", dateAdded: new Date().toLocaleDateString()},
  {id: 121, word: "ToUpper", meaning: "Converts all lowercase letters in a string to uppercase.", example: "ToUpper(\"abc\") // \"ABC\"", dateAdded: new Date().toLocaleDateString()},
  {id: 122, word: "Split", meaning: "Splits a string by a separator.", example: "Split(\"a,b\", \",\") // [\"a\", \"b\"]", dateAdded: new Date().toLocaleDateString()},
  {id: 123, word: "SplitWhiteSpaces", meaning: "Splits a string into words separated by whitespace.", example: "SplitWhiteSpaces(\"a b\") // [\"a\", \"b\"]", dateAdded: new Date().toLocaleDateString()},
  {id: 124, word: "SortIntegerTable", meaning: "Sorts a slice of integers in ascending order.", example: "SortIntegerTable([3,1,2]) // [1,2,3]", dateAdded: new Date().toLocaleDateString()},
  {id: 125, word: "RecursivePower", meaning: "Raises a number to a power recursively.", example: "RecursivePower(2,3) // 8", dateAdded: new Date().toLocaleDateString()},
  {id: 126, word: "RecursiveFactorial", meaning: "Returns the factorial of a number recursively.", example: "RecursiveFactorial(5) // 120", dateAdded: new Date().toLocaleDateString()},
  {id: 127, word: "PrintWordsTables", meaning: "Prints each word in a string array, one per line.", example: "PrintWordsTables([\"a\",\"b\"])", dateAdded: new Date().toLocaleDateString()},
  {id: 128, word: "PrintStr", meaning: "Prints a string character by character.", example: "PrintStr(\"abc\")", dateAdded: new Date().toLocaleDateString()},
  {id: 129, word: "PrintNbrInOrder", meaning: "Prints the digits of a number in ascending order.", example: "PrintNbrInOrder(321) // 123", dateAdded: new Date().toLocaleDateString()},
  {id: 130, word: "PrintNbr", meaning: "Prints an integer.", example: "PrintNbr(42)", dateAdded: new Date().toLocaleDateString()},
  {id: 131, word: "PrintCombN", meaning: "Prints all combinations of n different digits in ascending order.", example: "PrintCombN(2)", dateAdded: new Date().toLocaleDateString()},
  {id: 132, word: "PrintComb2", meaning: "Prints all possible combinations of two different two-digit numbers in ascending order.", example: "PrintComb2()", dateAdded: new Date().toLocaleDateString()},
  {id: 133, word: "PrintComb", meaning: "Prints all unique combinations of three different digits in ascending order.", example: "PrintComb()", dateAdded: new Date().toLocaleDateString()},
  {id: 134, word: "PointOne", meaning: "Sets the value pointed to by a pointer to 1.", example: "PointOne(&n)", dateAdded: new Date().toLocaleDateString()},
  {id: 135, word: "NRune", meaning: "Returns the nth rune of a string.", example: "NRune(\"abc\",2) // 'b'", dateAdded: new Date().toLocaleDateString()},
  {id: 136, word: "MakeRange", meaning: "Creates a slice of ints from min to max-1.", example: "MakeRange(1,4) // [1,2,3]", dateAdded: new Date().toLocaleDateString()},
  {id: 137, word: "LastRune", meaning: "Returns the last rune of a string.", example: "LastRune(\"abc\") // 'c'", dateAdded: new Date().toLocaleDateString()},
  {id: 138, word: "Join", meaning: "Joins a slice of strings with a separator.", example: "Join([\"a\",\"b\"],\",\") // \"a,b\"", dateAdded: new Date().toLocaleDateString()},
  {id: 139, word: "IterativeFactorial", meaning: "Returns the factorial of a number iteratively.", example: "IterativeFactorial(5) // 120", dateAdded: new Date().toLocaleDateString()},
  {id: 140, word: "IterativePower", meaning: "Raises a number to a power iteratively.", example: "IterativePower(2,3) // 8", dateAdded: new Date().toLocaleDateString()},
  {id: 141, word: "UltimatePointOne", meaning: "Sets the value pointed to by a triple pointer to 1.", example: "UltimatePointOne(&&&n)", dateAdded: new Date().toLocaleDateString()},
  {id: 142, word: "UltimateDivMod", meaning: "Divides *a by *b, stores quotient in *a and remainder in *b.", example: "UltimateDivMod(&a, &b)", dateAdded: new Date().toLocaleDateString()},
  {id: 143, word: "TrimAtoi", meaning: "Extracts the first integer from a string, ignoring non-digit characters.", example: "TrimAtoi(\"abc-123\") // -123", dateAdded: new Date().toLocaleDateString()},
  {id: 144, word: "Sqrt", meaning: "Returns the integer square root of a number, or 0 if not a perfect square.", example: "Sqrt(16) // 4", dateAdded: new Date().toLocaleDateString()},
  {id: 145, word: "Fibonacci", meaning: "Returns the nth Fibonacci number.", example: "Fibonacci(5) // 5", dateAdded: new Date().toLocaleDateString()},
  {id: 146, word: "BasicJoin", meaning: "Joins a slice of strings with no separator.", example: "BasicJoin([\"a\",\"b\"]) // \"ab\"", dateAdded: new Date().toLocaleDateString()},
  {id: 147, word: "BasicAtoi2", meaning: "Converts a string to an integer, returns 0 if invalid.", example: "BasicAtoi2(\"123\") // 123", dateAdded: new Date().toLocaleDateString()},
  {id: 148, word: "BasicAtoi", meaning: "Converts a string of digits to an integer.", example: "BasicAtoi(\"123\") // 123", dateAdded: new Date().toLocaleDateString()},
  {id: 149, word: "Atoi", meaning: "Converts a string to an integer, handling + and - signs.", example: "Atoi(\"-42\") // -42", dateAdded: new Date().toLocaleDateString()},
  {id: 150, word: "AppendRange", meaning: "Appends a range of integers from min to max-1 to a slice.", example: "AppendRange(1,4) // [1,2,3]", dateAdded: new Date().toLocaleDateString()},
  {id: 151, word: "AlphaCount", meaning: "Counts the number of alphabetic characters in a string.", example: "AlphaCount(\"abc123\") // 3", dateAdded: new Date().toLocaleDateString()},
  {id: 152, word: "PrintAlphaCount", meaning: "Prints the number of alphabetic characters in a string.", example: "PrintAlphaCount(\"abc123\")", dateAdded: new Date().toLocaleDateString()}
];